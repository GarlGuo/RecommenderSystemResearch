ratingsMatrix[user][movie] = sum (userFeature[f][user] * movieFeature[f][movie]) for f=1:40)

userValue[user] += lrate * err * movieValue[movie];
movieValue[movie] += lrate * err * userValue[user];

/*
 *  real *userValue = userFeature[featureBeingTrained];
 *  real *movieValue = movieFeature[featureBeingTrained];
 *  real  lrate = 0.001;
 */
void train(int user, int movie, real rating)
{
	real err = lrate * (rating - predictRating(movie, user));

	userValue[user] += err * movieValue[movie];
	movieValue[movie] += err * userValue[user];
}

real predictRating_Baseline(int movie, int user)
{
	return averageRating[movie] + averageOffset[user];
}

BogusMean = sum(ObservedRatings)/count(ObservedRatings)
K = Vb/Va
BetterMean = [GlobalAverage*K + sum(ObservedRatings)] / [K + count(ObservedRatings)]

userValue[user] = [sum residual[user,movie]*movieValue[movie]] / [sum (movieValue[movie]^2)]
userValue[user] = [sum residual[user,movie]*movieValue[movie]] / [sum (movieValue[movie]^2 + K)]

userValue[user] += lrate * (err * movieValue[movie] - K * userValue[user]);
movieValue[movie] += lrate * (err * userValue[user] - K * movieValue[movie]);